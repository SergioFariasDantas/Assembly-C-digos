.eqv	num	$s0
.eqv	char	$s1
.eqv	digito	$s2
.eqv	i	$t0
.eqv	k	$t1
.eqv	flag	$t2
.eqv	troca	$t4
.eqv	index_num	$t7
.eqv	resto	$s5
.eqv	quoc	$s6
.eqv	index_buf	$s7

.data
ler_Lista:	.asciiz "lista.txt"
escrever_Lista:	.asciiz "lista_ordenada.txt"
buffer:		.space 1024	#Buffer para leitura de dados 
buffer_2:		.space	500
lista:		.space	400	#Espaço da memória usado para armazenar os números da lista
lista_tamanho:	.word	0
newline:	.asciiz"\n"

li	$t8, 200		#Tamanho do array
	.align 2
vetor_num: .space 1024


.text
main:
#Abertura do arquivo para leitura:
	li	$v0, 13		#Abrir arquivo
	la	$a0, ler_Lista
	li	$a1, 0	#modo de leitura
	syscall
	move $s0, $v0

#Leitura do arquivo:
	move	$a0, $s0
	li	$v0, 14		#Comando de Leitura do arquivo
	la	$a1, buffer
	la	$a2, 1024
	syscall

#Fechar o arquivo:
	li	$v0, 16		#COmando de fechamento do arquivo
	move	$a0, $s0
	syscall

#Rotina de retorno do tamanho de uma string para um inteiro:
    li	$t0, 0		# i = 0 (índice do buffer)
    li	$t1, 0		# k = 0 (índice do vetor_num)
    li	$s0, 0		# num = 0
    li	$t2, 1		# flag = 1

loop_1:    
    lb	$s1, buffer($t0)	# Carregar o caractere atual do buffer
    beqz	$s1, fim		# Se for o final da string, sai
    beq	$s1, ',', armazena	# Se for vírgula, armazena
    beq	$s1, '-', negativo	# Se for sinal negativo, trata

converte:
    sub	$s2, $s1, 0x30	# Converte caractere para dígito
    mul	$t3, $s0, 10		# num = num * 10
    add	$s0, $t3, $s2	# num = num + dígito
    addi	$t0, $t0, 1		# i++
    j	loop_1

negativo:
    li	$t2, -1		# flag = -1
    addi	$t0, $t0, 1		# i++
    j	loop_1    

armazena:
    mul	$s0, $s0, $t2		# num = num * flag
    sw	$s0, vetor_num($t9)	# Armazena o número no vetor
    addi	$t1, $t1, 4		# k += 4 (próximo inteiro)
    addi	$t0, $t0, 1		# i++
    li	$s0, 0			# Reseta num para o próximo número
    li	$t2, 1			# Reseta flag para 1
    j	loop_1

fim:
    srl	$t1, $t1, 2		# k = k / 4 (número de inteiros)
    sw	$t1, lista_tamanho	# Armazena o tamanho da lista

# Algoritmo de ordenação Bubble Sort
	li	$t4, 0			# t4 = flag de troca
	li	$t0, 0			# i = 0 (índice externo)
	lw	$t1, lista_tamanho	# t1 = tamanho da lista

bubble_sort_outer:
    li	$t4, 0			# Reseta a flag de troca
    li	$t2, 0			# j = 0 (índice interno )
    
bubble_sort_inner:
    lw	$t5, vetor_num($t2)	# Carrega vetor_num[j]
    lw	$t6, vetor_num + 4($t2)	# Carrega vetor_num[j + 1]
    
    blt	$t5, $t6, swap		# Se vetor_num[j] < vetor_num[j + 1], troca
    j	no_swap

swap:
    sw	$t6, vetor_num($t2)	# Armazena vetor_num[j + 1] em vetor_num[j]
    sw	$t5, vetor_num + 4($t2)	# Armazena vetor_num[j] em vetor_num[j + 1]
    li	$t4, 1			# Define a flag de troca como 1

no_swap:
    addi	$t2, $t2, 4		# j += 4 (próximo inteiro)
    bge	$t2, $t1, end_inner	# Se j >= tamanho, sai do loop interno
    j	bubble_sort_inner

end_inner:
    addi	$t0, $t0, 1		# i++
    bgt	$t0, $t1, end_sort	# Se i >= tamanho, sai do loop externo
    bnez	$t4, bubble_sort_outer	# Se houve troca, continua o loop externo

end_sort:
 
#Conversão Inteiro para String:
	#1 - Dividir o número por 10 enquanto o quociente for diferente de 0
Inicio:
	li	index_buf, 0
Teste_sinal:
	lw 	num, vetor_num(index_num)	
	bge	num, $zero, converte	#Se for negativo, segue, se não, salta
	li	$s4, '-'
	sb	$s4, buffer(index_buf)
	li	$t8,	-1
	mul	num, num, $s4
	add	index_buf, index_buf, 1
Converte:
	move	quoc, num
Proximo:
	li	$s4, 10
	div	quoc, $s4		#Divide por 10
	mfhi	resto
	mflo	quoc
	add 	$s1, $s4, 0x30
	sb	char, buffer(index_buf)
	add	index_buf, index_buf, 1
	
#Abertura do arquivo de escrita:
	li	$v0, 13
	la	$a0, escrever_Lista
	li	$a1, 1
	syscall
	
	move	$s0, $v0
	
#Escrita do arquivo
	li	$v0, 15
	move	$a0, $s0
	la	$a1, buffer
	li	$a2, 500
	syscall

#Fechar o arquivo:
	li	$v0, 16		#COmando de fechamento do arquivo
	move	$a0, $s0
	syscall
	
Finalizar_Programa:
	li	$v0, 10
	syscall	
