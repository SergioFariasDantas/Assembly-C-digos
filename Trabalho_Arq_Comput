.data
ler_Lista:	.asciiz"lista.txt"
escrever_Lista:	.asciiz"lista.txt"
buffer:		.space 1024	#Buffer para leitura de dados 
lista:		.space	400	#Espaço da memória usado para armazenar os números da lista
lista_tamanho:	.word	0
neline:		.asciiz"\n"

.text
.globl	principal

##Função principal
principal:
#Abrir arquivo
	li $v0, 13	#syscall: open file
	la $a0, ler_Lista
	li $a1, 0
	li $a2, 0
	syscall
	move $s0, $v0
	
#Ler o arquivo para buffer
	li $v0, 14	#syscall: read file
	move $a0, $s0
	la $a1, buffer
	li $a2, 1024
	syscall

 #Fechar arquivo
 	li  $v0, 16	##syscall: close file
 	move $a0, $s0
 	syscall
 	
 # Converter a string lida para inteiros e armazena na lista 
 	la	$a0, buffer	#Endereço da string lida
 	jal	converter_string_para_inteiros	

#Ordenar a lista de inteiros
	jal	bubble_sort

#Abrir o arquivo para a escrita
	la	$v0, 13		#syscall: open file
	la	$v0, escrever_lista
	la	$a1, 1		#Modo escrita
	la	$a2, 0		#Flags
	syscall
	move	$s0, $v0	#Armazenar o escritor do arquivo em $s0

# Escreve a lista ordenada no arquivo
	jal escrever_lista_ordenada

# Fechar o arquivo
	li $v0, 16                    # syscall: close file
	move $a0, $s0                 # descritor do arquivo
	syscall

Fim:
	li	$v0, 10
	syscall

# Rotina: Converter string para inteiros e armazenar na lista
converter_string_para_inteiros:
# $a0 = endereço da string
# Código que percorre a string e converte para inteiros, armazenando na lista
	li $t0, 0                      # Índice para a lista
	li $t1, 0                      # Índice da string

converter_loop:
	lb $t2, 0($a0)                 # Carregar o próximo byte da string
	beqz $t2, converter_fim        # Se for nulo, fim da string
    
# Verifica se é uma vírgula (separador)
	li $t3, 44                     # ASCII da vírgula
	beq $t2, $t3, converter_adicionar_numero
